name: build-linux

on: [ push, pull_request ]

jobs:
  build-linux:
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash
    env:
      build_type: "Release"
      conan_path: "$HOME/.local/bin"
      vulkan_sdk: "$GITHUB_WORKSPACE/vulkan_sdk/"
      vulkan_version: "1.2.131.1"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Clang",
            artifact: "linux-clang.tar.xz",
            cc: "clang",
            cxx: "clang++"
          }
          - {
            name: "Ubuntu GCC",
            artifact: "linux-gcc-10.tar.xz",
            cc: "gcc-10",
            cxx: "g++-10"
          }
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Update environment
      run: |
        sudo apt update -qq
        sudo apt install -y \
          clang \
          cmake \
          gcc-10 \
          g++-10 \
          xorg-dev

    - name: Install Vulkan SDK
      run: |
        curl -LS -o vulkansdk.tar.gz https://sdk.lunarg.com/sdk/download/${{ env.vulkan_version }}/linux/vulkansdk-linux-x86_64-${{ env.vulkan_version }}.tar.gz

        mkdir "${{ env.vulkan_sdk }}"
        tar xfz vulkansdk.tar.gz -C "${{ env.vulkan_sdk }}"

    - name: Configure CMake
      run: |
        export CC=${{ matrix.config.cc }}
        export CXX=${{ matrix.config.cxx }}
        export VULKAN_SDK="${{ env.vulkan_sdk }}/${{ env.vulkan_version }}/x86_64"
        export PATH=$VULKAN_SDK/bin:$PATH
        export LD_LIBRARY_PATH=$VULKAN_SDK/lib:$LD_LIBRARY_PATH
        export VK_LAYER_PATH=$VULKAN_SDK/etc/explicit_layer.d

        cmake . -Bbuild -DCMAKE_BUILD_TYPE=${{ env.build_type }}

    - name: Build
      run: |
        cmake --build build

    - name: Prepare upload
      run: |
        tar cfz ${{ matrix.config.artifact }} build

    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        path: ${{ matrix.config.artifact }}
        name: ${{ matrix.config.artifact }}
